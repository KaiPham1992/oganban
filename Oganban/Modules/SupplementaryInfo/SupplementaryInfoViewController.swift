//
//  SupplementaryInfoViewController.swift
//  Oganban
//
//  Created Admin on 12/20/18.
//  Copyright © 2018 Coby. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class SupplementaryInfoViewController: BaseViewController, SupplementaryInfoViewProtocol {

	var presenter: SupplementaryInfoPresenterProtocol?

    @IBOutlet weak var lbError: UILabel!
    @IBOutlet weak var btnSend: OganbanCustomButton!
    @IBOutlet weak var tvPolicy: UITextView!
    @IBOutlet weak var btnCheck: UIButton!
    @IBOutlet weak var tfCode: OganbanCustomTextfield!
    @IBOutlet weak var tfAddress2: OganbanCustomTextfield!
    @IBOutlet weak var tfAddress1: OganbanCustomTextfield!
    @IBOutlet weak var tfSex: OganbanCustomTextfield!
    @IBOutlet weak var tfBirthday: OganbanCustomTextfield!
    @IBOutlet weak var tfName: OganbanCustomTextfield!
    @IBOutlet weak var btnClose: UIImageView!
    @IBOutlet weak var vContent: UIView!
    
    var isCheck: Bool = false {
        didSet{
            if isCheck {
                self.btnCheck.setImage(AppImage.imgCheck, for: .normal)
            }else {
                self.btnCheck.setImage(AppImage.imgUnCheck, for: .normal)
            }
        }
    }
    
    let textContent = "Đồng ý Điều khoản sử dụng"
    let termsConditionsString = "Điều khoản sử dụng"
    let termsConditionsTag = "TermsConditionsTag"
   
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        tapSendButton()
        textFieldDidBeginEditing()
        setupPolicy()
    }

    func setupView(){
        hideNavigation()
        hideError()
        
        self.view.backgroundColor = UIColor.black.withAlphaComponent(0.7)
        self.view.isOpaque = false
        
        self.isCheck = false
        
        vContent.layer.cornerRadius = 10
        vContent.layer.masksToBounds = true
        
        tfName.setupLayoutTextfield(placeholderText: "Nhập tên hiển thị", titleText: "Tên hiển thị *", placeholderColor: AppColor.black414141)
        tfCode.setupLayoutTextfield(placeholderText: "Nhập mã người giới thiệu nếu có", titleText: "Mã người giới thiệu", placeholderColor: AppColor.black414141)
        
        tfBirthday.setupLayoutTextfield(placeholderText: "Chọn ngày", titleText: "Ngày tháng năm sinh *", placeholderColor: AppColor.black414141)
        tfBirthday.showRightIcon(sỉze: CGSize(width: 11, height: 11), icon: AppImage.imgArrowDown)
        tfBirthday.tfContent.isEnabled = false
        
        tfSex.setupLayoutTextfield(placeholderText: "Chọn giới tính", titleText: "Giới tính", placeholderColor: AppColor.black414141)
        tfSex.showRightIcon(sỉze: CGSize(width: 11, height: 11), icon: AppImage.imgArrowDown)
        tfSex.tfContent.isEnabled = false
        
        tfAddress1.setupLayoutTextfield(placeholderText: "Bạn có thể nhập địa chỉ nhà", titleText: "Địa chỉ 1", placeholderColor: AppColor.black414141)
        tfAddress2.setupLayoutTextfield(placeholderText: "180 Cao Lỗ, Phường 4, Quận 8, Hồ Chí Minh, Việt Nam", titleText: "Địa chỉ 2", placeholderColor: AppColor.black414141)
        
        btnSend.setupLayoutButton(backgroundColor: AppColor.green005800, titleColor: AppColor.white, text: "Gửi")
        
        let tapCloseGesture = UITapGestureRecognizer(target: self, action: #selector(self.tapCloseButton(sender:)))
        btnClose.addGestureRecognizer(tapCloseGesture)
    }
    
    @objc func tapCloseButton(sender: UITapGestureRecognizer){
        self.dismiss()
    }
    
    func validateInputData() -> Bool {
        
        guard let name = self.tfName.tfContent.text else {
            return false
        }
        if name == "" {
            hideError(isHidden: false, message: "Vui lòng nhập tên hiển thị")
            return false
        }
        if !self.isCheck {
            hideError(isHidden: false, message: "Vui lòng chọn điều khoản sử dụng")
            return false
        }
        
        hideError()
        return true
    }
    
    func hideError(isHidden: Bool = true, message: String? = nil){
        lbError.isHidden = isHidden
        lbError.text = message ?? ""
    }
    
    func tapSendButton(){
        btnSend.tapButton = {
            self.view.endEditing(true)
            if self.validateInputData() {
                print("Success")
            } else {
                print("Login Error")
            }
        }
    }
    
    @IBAction func tapCheckButton(_ sender: UIButton) {
        self.isCheck = !self.isCheck
    }
}

extension SupplementaryInfoViewController {
    func textFieldDidBeginEditing() {
        tfName.textFieldDidBeginEditing = {
            self.hideError()
        }
    }
}

extension SupplementaryInfoViewController {
    
    func setupPolicy(){
        self.setPolicyContent()
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(self.tapPolicyText(_:)))
        
        self.tvPolicy.textContainerInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)
        self.tvPolicy.addGestureRecognizer(tapGesture)
        self.tvPolicy.isEditable = false
    }
    
    func setPolicyContent() {
        if let conditionsRange = textContent.range(of: termsConditionsString) {
            
            let attributed = NSMutableAttributedString(attributedString: NSAttributedString(string: textContent, attributes: [NSAttributedString.Key.font: AppFont.fontRegularRoboto15, NSAttributedString.Key.foregroundColor: AppColor.black414141]))
            
            let conditionsAttributes = NSDictionary.init(dictionary: [NSAttributedString.Key.font: AppFont.fontRegularRoboto15, NSAttributedString.Key.foregroundColor: AppColor.black414141, termsConditionsTag: (true) ])
            
            
            attributed.addAttributes(conditionsAttributes as! [NSAttributedString.Key : Any] , range: textContent.nsRange(from: conditionsRange))
            
            
            self.tvPolicy.attributedText = attributed
            self.tvPolicy.textAlignment = .left
        }
    }
    
    @objc func tapPolicyText(_ sender: UITapGestureRecognizer) {
        
        let senderView = sender.view
        if !(senderView is UITextView) {
            return
        }
        let textView: UITextView = sender.view as! UITextView
        let layoutManager = textView.layoutManager
        var location = sender.location(in: textView)
        location.x = location.x - textView.textContainerInset.left
        location.y = location.y - textView.textContainerInset.top
        
        // find the value
        let textContainer = textView.textContainer
        let characterIndex = layoutManager.characterIndex(for: location, in: textContainer, fractionOfDistanceBetweenInsertionPoints: nil)
        let textStorage: NSTextStorage = textView.textStorage
        if (characterIndex < textStorage.length - 1) {
            var range0 = NSRange()
            
            let termsConditionsValue = textStorage.attribute( NSAttributedString.Key(rawValue: termsConditionsTag), at: characterIndex, effectiveRange: &range0)
            
            if ((termsConditionsValue) != nil) {
                print("click Điều khoản sử dụng")
            }
            
        }
    }
}
