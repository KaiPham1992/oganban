//
//  UpdateProfileViewController.swift
//  Oganban
//
//  Created Kent on 12/22/18.
//  Copyright © 2018 Coby. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class UpdateProfileViewController: BaseViewController {

	var presenter: UpdateProfilePresenterProtocol?
    
    @IBOutlet weak var lbCodeIntro: UILabel!
    @IBOutlet weak var lbRateCount: UILabel!
    @IBOutlet weak var lbRating: UILabel!
    @IBOutlet weak var lbLevel: UILabel!
    @IBOutlet weak var lbPro: UILabel!
    @IBOutlet weak var lbError: UILabel!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var imgAvatar: UIImageView!
    @IBOutlet weak var btnSave: OganbanCustomButton!
    @IBOutlet weak var tfAddress2: OganbanCustomTextfield!
    @IBOutlet weak var tfAddress1: OganbanCustomTextfield!
    @IBOutlet weak var tvPhone: PhoneNumber!
    @IBOutlet weak var tfGender: OganbanCustomTextfield!
    @IBOutlet weak var tfBirthday: OganbanCustomTextfield!
    @IBOutlet weak var tfDisplayName: OganbanCustomTextfield!
    @IBOutlet weak var tfUsername: OganbanCustomTextfield!
    
    var birthDay: Date? = nil
    var gender: Gender? = nil
    var countryPhoneCode: CountryCodeEntity = {
        return CountryCodeEntity(name: "Vietnam", dialCode: "+84", code: "VN")
    } ()
    
    var user: UserEntity?
    var fbAccountKit: FBAccountKit!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        tapSaveButton()
        textFieldDidBeginEditing()
        hideError()
        addGesture()
        setDefaultData()
       
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.fbAccountKit = FBAccountKit(_controller: self)
        super.viewWillAppear(animated)
        if fbAccountKit.isLogged {
            DispatchQueue.main.async(execute: {
                self.fbAccountKit.getCountryCodeAndPhoneNumber(completion: { phone in
                    guard let _user = self.user else { return }
                    self.presenter?.updateProfile(userInfo: _user)
                })
            })
        }
    }
    
    @IBAction func btnAvatarTapped() {
        SelectImageFromMobileHelper.shared.showSelectImage(limit: 1) { images in
            if !images.isEmpty {
                self.imgAvatar.image = images[0]
                self.presenter?.updateAvatar(image: images[0])
            }
        }
    }
    
    func hideError(isHidden: Bool = true, message: String? = nil){
        lbError.isHidden = isHidden
        lbError.text = message ?? ""
    }
    
    func setDefaultData(){
        if let user = UserDefaultHelper.shared.loginUserInfo {
            if let countRating = user.countRating{
                lbRateCount.text = countRating + " đánh giá"
            }
            if let pointRatingAvg = user.pointRatingAvg, let pointRating = Float(pointRatingAvg) {
                lbRating.text =  String(format: "%.1f", pointRating)
            }
            if let urlString = user.imgCropSrc, let url = URL(string: BASE_URL_IMAGE + urlString) {
                imgAvatar.sd_setImage(with: url , placeholderImage: AppImage.imgDefaultUser)
            }
            
            if let email = user.email {
                tfUsername.tfContent.text = email
            }
            
            if user.codeIntro != nil {
                lbCodeIntro.text = user.codeIntro
            }
            if user.level != nil {
                self.lbLevel.text = user.level
                if user.isPro == "1" {
                    self.lbPro.isHidden = false
                    self.lbPro.text = "  Pro"
                } else {
                    self.lbPro.isHidden = true
                    self.lbPro.text = ""
                }
                
            }
            
            if let fullName = user.fullName {
                tfDisplayName.tfContent.text = fullName
            }
           
            if let houseAddress = user.houseAddress {
                 tfAddress1.tfContent.text = houseAddress
            }
            if let companyAddress = user.companyAddress {
                tfAddress2.tfContent.text = companyAddress
            }
         
            if let phone = user.phone {
                tvPhone.tfPhone.text = phone
            }
           
            if let phoneCode = user.phoneCode {
                tvPhone.lbCountryCode.text = phoneCode
            }
            
            if let birthday = user.birthday {
                tfBirthday.tfContent.text = getBirthday(birthDay: birthday)
            }
            
            if let gender = user.gender {
                tfGender.tfContent.text = convertGender(gender: gender)
            }
           
        }
    }
    
    func convertGender(gender: String) -> String {
        if gender == "male" {
            self.gender = Gender(title: "Nam", keyParam: "male")
            return "Nam"
        } else if gender == "female" {
            self.gender = Gender(title: "Nữ", keyParam: "female")
            return "Nữ"
        } else {
            self.gender = Gender(title: "Khác", keyParam: "other")
            return "Khác"
        }
    }
    
    func getDialCodeFromCodePhone(code: String) -> String{
        for item in tvPhone.listCode {
            if item.code == code {
                return item.dialCode ?? ""
            }
        }
        return ""
    }
    
    func getBirthday(birthDay: String) -> String? {
        let date = DateFormatter()
        date.dateFormat = AppDateFormat.yyyyMMdd.formatString
        let sDate = date.date(from: birthDay)
        self.birthDay = sDate
        return sDate?.toString(dateFormat: AppDateFormat.ddMMYYYY_VN)
    }
}

extension UpdateProfileViewController {
    func validateInputData() -> Bool {
        
        guard let username = self.tfUsername.tfContent.text else {
            hideError(isHidden: false, message: MessageString.emptyUsername)
            return false
        }
        
        if username == ""  {
            hideError(isHidden: false, message: MessageString.emptyUsername)
            return false
        }
        
        if username.isValidEmail() == false  {
            hideError(isHidden: false, message: MessageString.checkedUsername)
            return false
        }
        
        guard let displayName = self.tfDisplayName.tfContent.text else {
            hideError(isHidden: false, message: MessageString.emptyDisplayName)
            return false
        }
        
        if displayName == "" {
            hideError(isHidden: false, message: MessageString.emptyDisplayName)
            return false
        }
        
        guard let birthDay =  self.birthDay else {
            hideError(isHidden: false, message: MessageString.emptyBirthday)
            return false
        }
        
        let age = calculateAge(birthday: birthDay)
        if age < 15  {
            hideError(isHidden: false, message: MessageString.checkedAge)
            return false
        }
        
        guard let phone =  self.tvPhone.tfPhone.text else {
            hideError(isHidden: false, message: MessageString.emptyPhone)
            return false
        }
        
        if phone == "" {
            hideError(isHidden: false, message: MessageString.emptyPhone)
            return false
        }
        
        if phone.isValidPhone2() == false {
            hideError(isHidden: false, message: MessageString.checkedPhone)
            return false
        }
        
        hideError()
        return true
    }
    
    func calculateAge(birthday: Date) -> Int {
        let now = Date()
        let calendar = Calendar.current
        let ageComponents = calendar.dateComponents([.year], from: birthday, to: now)
        return ageComponents.year!
    }
}

extension UpdateProfileViewController: PhoneNumberDelegate {
    func phoneCodeChoose(info: CountryCodeEntity) {
        self.countryPhoneCode = info
    }
}
