//
//  CommentDetailViewController.swift
//  Oganban
//
//  Created DINH VAN TIEN on 1/12/19.
//  Copyright © 2019 Coby. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class CommentDetailViewController: BaseViewController {

	var presenter: CommentDetailPresenterProtocol?
    
    @IBOutlet weak var vPostCommentView: PostCommentView!
    @IBOutlet weak var bottomConstant: NSLayoutConstraint!
    @IBOutlet weak var heightConstant: NSLayoutConstraint!
    @IBOutlet weak var tbDetail: UITableView!
    
    var tapGesture: UITapGestureRecognizer!
    var listComment = [CommentEntity]() {
        didSet {
            tbDetail.reloadData()
        }
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        addKeyboardNotification()
        vPostCommentView.delegate = self
        configureTable()
    }
    
    override func setUpNavigation() {
        super.setUpNavigation()
        addBackToNavigation()
        setTitleNavigation(title: "Danh sách bình luận")
    }
}

extension CommentDetailViewController: CommentDetailViewProtocol {
    
}

// MARK: handle view post
extension CommentDetailViewController: PostCommentViewDelegate {
    func postCommentView(_ postCommentView: PostCommentView, changeHeight height: CGFloat) {
        heightConstant.constant = height
    }
    
    func postCommentView(_ postCommentView: PostCommentView, sendComment comment: String) {
        if postCommentView == vPostCommentView {
//            let param = SendCommentParam(recordId: recordId&, comment: comment&, isReComment: "0")
//            presenter?.sendComment(param: param)
//            let commentAdd = CommentEntity(comment: comment)
//            insertComment(comment: commentAdd)
            
        } else {
//            let subComment = SubCommentEntity(comment: comment)
//            insertSubComment(section: postCommentView.tag, subComment: subComment)
        }
        
    }
    
    override func keyboardWillShow(_ notification: Notification) {
        print("addGesture")
        addGesture()
    }
    
    override func keyboardWillHide() {
        if tapGesture != nil {
            self.view.removeGestureRecognizer(tapGesture)
        }
    }
    
    func addGesture() {
        if tapGesture == nil {
            tapGesture = UITapGestureRecognizer(target: self, action: #selector(tapGestureExecute))
        }
        
        self.view.addGestureRecognizer(tapGesture)
    }
    
    @objc func tapGestureExecute() {
        self.view.endEditing(true)
    }
}

// MARK: helper
extension CommentDetailViewController {
    
    func insertSubComment(section: Int, subComment: SubCommentEntity) {
        self.listComment[section].subComment.append(subComment)
        
        tbDetail.beginUpdates()
        let indexPath = IndexPath(item: self.listComment[section].subComment.count, section: section)
        tbDetail.insertRows(at: [indexPath], with: .none)
        tbDetail.endUpdates()
        
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.3) {
            self.tbDetail.scrollToBottom(section: section)
        }
    }
    
    func insertComment(comment: CommentEntity) {
        self.listComment.append(comment)
        tbDetail.reloadData()
        
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + 0.3) {
            self.tbDetail.scrollToBottom()
        }
        
    }
}

// MARK: table
extension CommentDetailViewController: UITableViewDelegate, UITableViewDataSource {
    func configureTable() {
        tbDetail.delegate = self
        tbDetail.dataSource = self
        tbDetail.registerXibFile(CommentCell.self)
        tbDetail.registerXibFile(SubCommentCell.self)
        tbDetail.registerXibFile(ReplyCommentCell.self)
        tbDetail.separatorStyle = .none
        tbDetail.rowHeight = UITableView.automaticDimension
        tbDetail.estimatedRowHeight = 150
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.row {
        case 0:
            let cell = tbDetail.dequeue(CommentCell.self, for: indexPath)
            cell.comment = listComment[indexPath.section]
            return cell
        case self.listComment[indexPath.section].subComment.count + 1:
            let cell = tbDetail.dequeue(ReplyCommentCell.self, for: indexPath)
            cell.vPostCommentView.tag = indexPath.section
            cell.vPostCommentView.delegate = self
            return cell
        default:
            let cell = tbDetail.dequeue(SubCommentCell.self, for: indexPath)
            cell.subComment = self.listComment[indexPath.section].subComment[indexPath.item - 1]
            return cell
        }
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return listComment.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.listComment[section].subComment.count + 2
    }
}



