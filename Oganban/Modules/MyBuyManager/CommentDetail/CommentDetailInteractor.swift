//
//  CommentDetailInteractor.swift
//  Oganban
//
//  Created DINH VAN TIEN on 1/12/19.
//  Copyright © 2019 Coby. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class CommentDetailInteractor: CommentDetailInteractorInputProtocol {

    weak var presenter: CommentDetailInteractorOutputProtocol?
    
    
    func sendComment(param: SendCommentParam) {
        ProgressView.shared.show()
        if param.isReComment == "1" {
            Provider.shared.recordAPIService.sendSubComment(param: param, success: { (comment) in
                ProgressView.shared.hide()
                self.presenter?.didSubSendComment(comment: comment)
            }) { (error) in
                ProgressView.shared.hide()
            }
        } else {
            Provider.shared.recordAPIService.sendComment(param: param, success: { (comment) in
                ProgressView.shared.hide()
                self.presenter?.didSendComment(comment: comment)
                
            }) { (error) in
                ProgressView.shared.hide()
            }
        }
    }
    
    func getCommentList(recordId: String, offset: Int) {
        ProgressView.shared.show()
        Provider.shared.recordAPIService.getCommentResponse(recordId: recordId, offset: offset, success: { _commentReponse in
            ProgressView.shared.hide()
            self.presenter?.didGetComment(commentResponseEntity: _commentReponse)
        }) { _ in
            ProgressView.shared.hide()
        }
        
    }
    
    func getCommentParent(commentID: String) {
        ProgressView.shared.show()
        Provider.shared.recordAPIService.getCommentParent(commentID: commentID, success: { (comment) in
            ProgressView.shared.hide()
            self.presenter?.didGetCommentParent(comment: comment)
        }) { (_) in
            ProgressView.shared.hide()
        }
    }
    
    func getCommentChild(commentID: String, offset: Int, limit: Int) {
        ProgressView.shared.show()
        Provider.shared.recordAPIService.getChildCommentList(commentID: commentID, offset: offset, limit: limit, success: { (subcomment) in
            ProgressView.shared.hide()
            guard let temp = subcomment?.subCommnent else { return }
            let item = temp.sorted(by: { sub1, sub2 -> Bool in
                guard let time1 = sub1.createTime, let time2 = sub2.createTime else { return false}
                
                return time1.isSmaller(date: time2)
            })
            subcomment?.subCommnent = item
            self.presenter?.didGetCommentChild(subComment: subcomment)
        }) { (_) in
            ProgressView.shared.hide()
        }
    }
}
