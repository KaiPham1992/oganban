//
//  MySellingViewController.swift
//  Oganban
//
//  Created Coby on 12/29/18.
//  Copyright © 2018 Coby. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit


protocol MySellingViewControllerDelegate: class {
    func gotoLogin()
    func gotoMySellExpired()
    func gotoPostRecord()
}

class MySellingViewController: BaseViewController {

    @IBOutlet weak var vContain: UIView!
    @IBOutlet weak var lbTotalPosted: UILabel!
    @IBOutlet weak var lbTotalSubPost: UILabel!
    @IBOutlet weak var vCheckLogin: UIView!
    @IBOutlet weak var btnLogin: UIButton!
    @IBOutlet weak var tbMySelling: UITableView!
    @IBOutlet weak var vPostRecord: UIView!
    
    
    
	var presenter: MySellingPresenterProtocol?

    var parrentNavigation: UINavigationController?
    weak var delegate: MySellingViewControllerDelegate?
    var refeshControl: UIRefreshControl?
    var isCanLoadMore: Bool = false
    var isRefresh = false
    
    var listRecord: BaseRecordEntity? {
        didSet {
            if let count = self.listRecord?.dataRecord, count.isEmpty  {
                tbMySelling.isHidden = true
                showNoData()
            } else {
                hideNoData()
            }
            
            lbTotalPosted.text = "Tin đã đăng: \(listRecord?.allowShow ?? 0)"
            lbTotalSubPost.text = "Tin cho phép đăng: \(listRecord?.allowNews ?? 0)"
            
            tbMySelling.reloadData()
        }
    }
    
    
	override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        checkLogin()
        getData()
    }
    
    func setupView() {
        btnLogin.setBorderWithCornerRadius(borderWidth: 0, borderColor: .clear, cornerRadius: 20)
        vContain.setBorderWithCornerRadius(borderWidth: 0, borderColor: .clear, cornerRadius: 10)
        vPostRecord.setBorderWithCornerRadius(borderWidth: 0, borderColor: .clear, cornerRadius: 16.5)
        
        configTable()
        
        refeshControl = UIRefreshControl()
        refeshControl?.addTarget(self, action: #selector(self.refeshData), for: .valueChanged)
        tbMySelling.addSubview(refeshControl!)
    }
    
    func checkLogin() {
        if UserDefaultHelper.shared.isLoggedIn {
            vCheckLogin.isHidden = true
//            getData()
        } else {
            vCheckLogin.isHidden = false
        }
    }
    
    func configTable() {
        tbMySelling.dataSource = self
        tbMySelling.delegate = self
        
        tbMySelling.registerTableCell(MySellingCell.self)
        tbMySelling.separatorStyle = .none
        tbMySelling.contentInset.bottom = 20
        tbMySelling.tableFooterView = UIView()
    }
    
    func getData() {
        presenter?.getRecordSellerPost(status: "show", offset: 0, limit: limitLoad)
    }
    
    @objc private func refeshData() {
        isRefresh = true
        getData()
        refeshControl?.endRefreshing()
    }
    
    @IBAction func btnPostRecordTapped() {
        delegate?.gotoPostRecord()
        
    }
    
    @IBAction func btnExpired() {
        delegate?.gotoMySellExpired()
    }
    
    @IBAction func login() {
        delegate?.gotoLogin()
    }
    
    
}

extension MySellingViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let count = listRecord?.dataRecord.count else { return 0}

        return count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueTableCell(MySellingCell.self)
        cell.vRecordSelling.record = listRecord?.dataRecord[indexPath.item]
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 130
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let record = self.listRecord?.dataRecord[indexPath.item]
        let vc = OrderDetailRouter.createModule(recordId: record?.id)
        parrentNavigation?.pushViewController(vc, animated: true)
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        guard let count = self.listRecord?.dataRecord.count else { return }
        
            if indexPath.item == count - 5 && isCanLoadMore {
                print("load more")
                presenter?.getRecordSellerPost(status: "show", offset: count, limit: limitLoad)
            }
    }
}

extension MySellingViewController: MySellingViewProtocol {
    
    func didGetRecordSellerPost(listRecord: BaseRecordEntity?) {
        // nil or count = 0
        isCanLoadMore = false
        isCanLoadMore = listRecord?.dataRecord.count == limitLoad
        if self.listRecord == nil || self.listRecord?.dataRecord.count == 0 || isRefresh {
            isRefresh = false
            self.listRecord = listRecord
        } else {
            guard let data = listRecord?.dataRecord else { return }
            self.listRecord?.dataRecord.append(contentsOf: data)
        }
       
    }
    
    func didGetRecordSellerPost(error: APIError?) {
        print("ERROR .....")
    }
    
    
}
