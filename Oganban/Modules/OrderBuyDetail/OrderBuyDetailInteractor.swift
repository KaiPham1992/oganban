//
//  OrderDetailInteractor.swift
//  Oganban
//
//  Created Kai Pham on 12/23/18.
//  Copyright © 2018 Coby. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class OrderBuyDetailInteractor: OrderBuyDetailInteractorInputProtocol {

    weak var presenter: OrderBuyDetailInteractorOutputProtocol?
    
    func getDetail(id: String) {
        ProgressView.shared.show()
        Provider.shared.recordAPIService.getRecordDetail(id: id, success: { record in
            ProgressView.shared.hide()
            self.presenter?.didGetDetail(record: record)
        }) { _ in
            ProgressView.shared.hide()
        }
    }
    
    func bookingOrder(recordID: String, price: Double, quantity: Int, paymentType: String, isService: Bool) {
        ProgressView.shared.show()
        Provider.shared.orderAPIService.bookingOrder(recordID: recordID, price: price, quantity: quantity, paymentType: paymentType, isService: isService, success: { (order) in
            ProgressView.shared.hide()
            self.presenter?.didBooking(order: order)
        }) { (error) in
            ProgressView.shared.hide()
            if error?.message == "NOT_BUY_PRODUCT_ME" {
                PopUpHelper.shared.showMessageHaveAds(message: "Bạn không thể mua hàng của chính mình")
            }
            
        }
    }
    
    func AddFavorite(isFavorite: Int, accountID: Int) {
        Provider.shared.userAPIService.removeFavourite(isFavorite: isFavorite, accountId: accountID, success: { (data) in
            self.presenter?.didAddFavorite(data: data)
        }) { (_) in
            
        }
    }
    
    
    func sendComment(param: SendCommentParam) {
        ProgressView.shared.show()
        if param.isReComment == "1" {
            Provider.shared.recordAPIService.sendSubComment(param: param, success: { (comment) in
                ProgressView.shared.hide()
                self.presenter?.didSubSendComment(comment: comment)
            }) { (error) in
                ProgressView.shared.hide()
            }
        } else {
            Provider.shared.recordAPIService.sendComment(param: param, success: { (comment) in
                ProgressView.shared.hide()
                self.presenter?.didSendComment(comment: comment)
                
            }) { (error) in
                ProgressView.shared.hide()
            }
        }
    }
    
    func getCommentList(recordId: String, offset: Int) {
        ProgressView.shared.show()
        Provider.shared.recordAPIService.getCommentResponse(recordId: recordId, offset: offset, success: { _commentReponse in
            ProgressView.shared.hide()
            self.presenter?.didGetComment(commentResponseEntity: _commentReponse)
        }) { _ in
            ProgressView.shared.hide()
        }
        
    }
    
}
