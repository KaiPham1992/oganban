//
//  FavouriteViewController.swift
//  Oganban
//
//  Created Kent on 1/5/19.
//  Copyright © 2019 Coby. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class FavouriteViewController: BaseViewController {
    
    var presenter: FavouritePresenterProtocol?
    
    @IBOutlet weak var tvFavourite: UITableView!
    @IBOutlet weak var vCheckLogin: UIView!
    @IBOutlet weak var btnLogin: UIButton!
    
    var refreshControl:  UIRefreshControl!
    var canLoadMore = false
    var isRefresh = false
    var removedItemIndex: Int? = nil
    
    var favouriteList = [FavouriteEntity]() {
        didSet {
            tvFavourite.reloadData()
            if self.favouriteList.isEmpty {
                tvFavourite.isHidden = true
                showNoData()
            } else {
                hideNoData()
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.addBackToNavigation(icon: AppImage.imgWhiteBack)
        self.setTitleNavigation(title: NavigationTitle.favourite)
        configureTableView()
        btnLogin.setBorderWithCornerRadius(borderWidth: 0, borderColor: .clear, cornerRadius: 20)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.hideTabbar()
        checkLogin()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
            pullToRefresh()
        
    }
    
    func configureTableView() {
        tvFavourite.dataSource = self
        tvFavourite.delegate = self
        tvFavourite.registerXibFile(FavouriteCell.self)
        tvFavourite.tableFooterView = UIView()
        refreshControl = UIRefreshControl()
        refreshControl.addTarget(self, action: #selector(pullToRefresh), for: .valueChanged)
        tvFavourite.addSubview(refreshControl)
    }
    
    func checkLogin() {
        if UserDefaultHelper.shared.isLoggedIn {
            vCheckLogin.isHidden = true
        } else {
            vCheckLogin.isHidden = false
            hideNoData()
        }
    }
    
    @objc func pullToRefresh() {
        isRefresh = true
        self.refreshControl.endRefreshing()
        presenter?.getFavourite(offset: 0)
    }
    
    @IBAction func btnLoginTapped() {
        presenter?.gotoLogin()
    }
}
extension FavouriteViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return favouriteList.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeue(FavouriteCell.self, for: indexPath) as FavouriteCell
        cell.showData(index: indexPath.row, favourite: favouriteList[indexPath.row])
        cell.delegate = self
        return cell
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return  85
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if canLoadMore && indexPath.item == self.favouriteList.count - 5 {
            presenter?.getFavourite(offset: self.favouriteList.count)
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        presenter?.showProductList(item: self.favouriteList[indexPath.item])
    }
}

extension FavouriteViewController: FavouriteViewProtocol{
    
    func removeSucessFavourite(baseResponse: BaseResponse?) {
        if baseResponse?.status == 200, let index = removedItemIndex {
            self.favouriteList.remove(at: index)
        }
    }
    
    func getSucessFavourite(favourite: [FavouriteEntity]) {
        canLoadMore = false
        //guard let _favourite = favourite else { return }
        canLoadMore = favourite.count == limitLoad
        
        if self.favouriteList.isEmpty || isRefresh {
            isRefresh = false
            self.favouriteList = favourite
        } else {
            self.favouriteList.append(contentsOf: favourite)
        }
    }
    
    func getErrorFavourite(error: APIError?) {
        canLoadMore = false
        self.favouriteList = []
    }
}

extension FavouriteViewController: FavouriteCellProtocol{
    func removeFavourite(index: Int) {
        if let id = self.favouriteList[index].id, let accountId = Int(id)  {
            PopUpHelper.shared.showYesNoQuestionHaveAds(question: "Bạn thật sự muốn bỏ yêu thích?", completionYes: {
                self.removedItemIndex = index
                self.presenter?.removeFavourite(isFavorite: 0, accountId: accountId)
            }) { }
        }
    }
}
